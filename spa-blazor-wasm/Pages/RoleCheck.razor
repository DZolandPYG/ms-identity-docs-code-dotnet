@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@inject AuthenticationStateProvider AuthenticationStateProvider


@page "/rolecheck"


<h3>RoleCheck</h3>
<AuthorizeView>
    <Authorized>
        <p>User roles: @JsonSerializer.Serialize(userRoles)</p>
        @DisplayIf("Provider")

        @DisplayIf("Admin")

        @foreach(string userRole2 in userArray)
        {
            <p>The array user is a @userRole2</p>
        }


    </Authorized>
    <NotAuthorized>
        <p>You must first login to your MS Account to see your roles for this app!.</p>
    </NotAuthorized>
</AuthorizeView>

@code {


    private List<string> userRoles = new();
    string userStuff;
    string userArrayJson;
    string[] userArray;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userRoles = user.FindAll(c => c.Type == "roles").Select(c => c.Value).ToList();
            userArrayJson = userRoles.First();
            userArray = JsonSerializer.Deserialize<string[]>(userArrayJson);
            userStuff = JsonSerializer.Serialize(userRoles);
        }
    }

    public bool VerifyUserIsRole(string[] userRoles, string desiredRole)
    {
        if (userRoles.Contains(desiredRole))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public RenderFragment DisplayIf(string RoleCheck)
    {
        bool success = VerifyUserIsRole(userArray, RoleCheck);
        if (success)
        {
            return@<p>You can see this since you are a @RoleCheck</p>;
        }
        else
        {
            return@<p>You cannot see this since you are NOT a @RoleCheck</p>;
        }
    }

}
